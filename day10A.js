const INPUT = `#.#................#..............#......#......
.......##..#..#....#.#.....##...#.........#.#...
.#...............#....#.##......................
......#..####.........#....#.......#..#.....#...
.....#............#......#................#.#...
....##...#.#.#.#.............#..#.#.......#.....
..#.#.........#....#..#.#.........####..........
....#...#.#...####..#..#..#.....#...............
.............#......#..........#...........#....
......#.#.........#...............#.............
..#......#..#.....##...##.....#....#.#......#...
...#.......##.........#.#..#......#........#.#..
#.............#..........#....#.#.....#.........
#......#.#................#.......#..#.#........
#..#.#.....#.....###..#.................#..#....
...............................#..........#.....
###.#.....#.....#.............#.......#....#....
.#.....#.........#.....#....#...................
........#....................#..#...............
.....#...#.##......#............#......#.....#..
..#..#..............#..#..#.##........#.........
..#.#...#.......#....##...#........#...#.#....#.
.....#.#..####...........#.##....#....#......#..
.....#..#..##...............................#...
.#....#..#......#.#............#........##...#..
.......#.....................#..#....#.....#....
#......#..###...........#.#....#......#.........
..............#..#.#...#.......#..#.#...#......#
.......#...........#.....#...#.............#.#..
..##..##.............#........#........#........
......#.............##..#.........#...#.#.#.....
#........#.........#...#.....#................#.
...#.#...........#.....#.........#......##......
..#..#...........#..........#...................
.........#..#.......................#.#.........
......#.#.#.....#...........#...............#...
......#.##...........#....#............#........
#...........##.#.#........##...........##.......
......#....#..#.......#.....#.#.......#.##......
.#....#......#..............#.......#...........
......##.#..........#..................#........
......##.##...#..#........#............#........
..#.....#.................###...#.....###.#..#..
....##...............#....#..................#..
.....#................#.#.#.......#..........#..
#........................#.##..........#....##..
.#.........#.#.#...#...#....#........#..#.......
...#..#.#......................#...............#`;

const asteroids = [];

const lines = INPUT.split("\n");
for (let i = 0; i < lines.length; i++) {
  for (let j = 0; j < lines[i].length; j++) {
    if (lines[i][j] === "#") {
      asteroids.push([i, j]);
    }
  }
}

console.log(asteroids);

const count = {};

function canSeeEachOther([x1, y1], [x2, y2]) {
  for (const [x3, y3] of asteroids) {
    if ((x1 !== x3 || y1 !== y3) && (x2 !== x3 || y2 !== y3)) {
      if ((x1 <= x3 && x3 <= x2) || (x2 <= x3 && x3 <= x1)) {
        if ((y1 <= y3 && y3 <= y2) || (y2 <= y3 && y3 <= y1)) {
          const triangleArea = (x1 - x3) * (y3 - y2) - (x3 - x2) * (y1 - y3);
          if (triangleArea === 0) {
            return false;
          }
        }
      }
    }
  }

  return true;
}

for (let [x1, y1] of asteroids) {
  for (let [x2, y2] of asteroids) {
    if (x1 !== x2 || y1 !== y2) {
      if (canSeeEachOther([x1, y1], [x2, y2])) {
        count[`${x1}-${y1}`] = (count[`${x1}-${y1}`] || 0) + 1;
      }
    }
  }
}

const max = Object.keys(count).reduce(
  (prev, current) => (prev < count[current] ? count[current] : prev),
  -Infinity
);

console.log({max});
